type Term {
   _id: ID! @id
   input: String!
   value: Int
   is_expr: Expr @relationship(type: "IS_EXPR", direction: OUT)
   exprs_is_term: Expr @relationship(type: "IS_TERM", direction: IN)
   exprs_is_term2: Expr @relationship(type: "IS_TERM2", direction: IN)
}

type Operator {
   _id: ID! @id
   input: String!
   exprs: Expr @relationship(type: "IS_OPERATOR", direction: IN)
}

type Expr {
   _id: ID! @id
   input: String!
   name: String!
   is_term_one: Term @relationship(type: "IS_TERM_ONE", direction: OUT)
   is_operator: Operator @relationship(type: "IS_OPERATOR", direction: OUT)
   is_term_two: Term @relationship(type: "IS_TERM_TWO", direction: OUT)
}

type Query {
   exprCount: Int! @cypher(statement: "MATCH (e:Expr) RETURN COUNT(e)")
   expr(name: String!):[Expr]
     @cypher(statement: "MATCH (e:Expr {name: $name}) RETURN e")
# Ã¤ndert nichts:    @cypher(statement: "MATCH (e:Expr {name: $name})-[r:IS_TERM]->(t:Term) RETURN e,r,t")
# liefert Fehler:     @cypher(statement: "MATCH (e:Expr {name: $name}) CALL apoc.path.subgraphAll(e, {maxLevel:290}) YIELD nodes, relationships RETURN nodes, relationships")
}